document.addEventListener("DOMContentLoaded",(async()=>{const t=document.getElementById("teamSelect"),e=document.getElementById("players"),a=document.getElementById("playerStats"),n=document.getElementById("statsForm"),s=document.getElementById("cancelStats"),i=document.getElementById("newPlayerForm");let o=null,r=null;async function l(t,e={}){try{const a=await fetch(t,e);if(!a.ok)throw new Error(`Ошибка ${a.status} при загрузке ${t}`);return await a.json()}catch(t){return alert(t.message),console.error(t),null}}async function c(t){let s=`/api/admin/players?teamId=${t}`;3==+t&&(s="/api/admin/players/archive");const i=await l(s);i&&(e.innerHTML="",i.forEach((s=>{const i=document.createElement("div");if(i.classList.add("player-item"),i.textContent=`${s.name} — ${s.position}, №${s.number}`,3==+t){const t=document.createElement("button");t.textContent="Восстановить",t.classList.add("button-small"),t.onclick=()=>async function(t){const e=await l("/api/admin/teams/active");if(!e)return;const a=prompt(`Введите ID команды для восстановления:\n${e.map((t=>`${t.id} - ${t.name}`)).join("\n")}`),n=e.find((t=>t.id==a));n?(await fetch(`/api/admin/players/${t}/move`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({newTeamId:n.id})})).ok?await c(o):alert("Ошибка при восстановлении игрока"):alert("Неверный выбор команды")}(s.id),i.appendChild(t)}else{const t=document.createElement("button");t.textContent="В архив",t.classList.add("button-small"),t.onclick=()=>async function(t){(await fetch(`/api/admin/players/${t}/move`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({newTeamId:3})})).ok?(await c(o),a.style.display="none"):alert("Ошибка при отправке в архив")}(s.id),i.appendChild(t),i.style.cursor="pointer",i.onclick=()=>async function(t){r=t;const e=await l(`/api/admin/players/${t}/statistics`);e?(n.matches.value=e.matches||0,n.goals.value=e.goals||0,n.assists.value=e.assists||0,n.zeromatch.value=e.zeromatch||0,n.lostgoals.value=e.lostgoals||0,n.zanetti_priz.value=e.zanetti_priz||0,a.style.display="block"):alert("Статистика не найдена")}(s.id)}e.appendChild(i)})))}function d(t){const e=t.trim().split(" ");return 3===e.length?e[2]:""}n.addEventListener("submit",(async t=>{if(t.preventDefault(),!r)return;const e={matches:+n.matches.value,goals:+n.goals.value,assists:+n.assists.value,zeromatch:+n.zeromatch.value,lostgoals:+n.lostgoals.value,zanetti_priz:+n.zanetti_priz.value};(await fetch(`/api/admin/players/${r}/statistics`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok?alert("Статистика сохранена"):alert("Ошибка при сохранении статистики")})),s.addEventListener("click",(()=>{a.style.display="none"})),i.addEventListener("submit",(async t=>{if(t.preventDefault(),!o)return void alert("Выберите команду");const e=new FormData(i),a={team_id:o,name:e.get("name"),number:e.get("number"),position:e.get("position"),birth_date:e.get("birth_date"),height_cm:e.get("height_cm")||null,weight_kg:e.get("weight_kg")||null,is_captain:e.get("is_captain")?1:0,patronymic:d(e.get("name"))};(await fetch("/api/admin/players",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)})).ok?(alert("Игрок добавлен"),i.reset(),await c(o)):alert("Ошибка при добавлении игрока")})),t.addEventListener("change",(async()=>{o=t.value,await c(o),a.style.display="none"})),await async function(){const e=await l("/api/admin/teams/active");e&&(e.push({id:3,name:"Архив"}),t.innerHTML="",e.forEach((e=>{const a=document.createElement("option");a.value=e.id,a.textContent=e.name,t.appendChild(a)})),!o&&e.length>0&&(o=e[0].id),t.value=o,await c(o))}()})),router.put("/players/statistics",(async(t,e)=>{const{updates:a}=t.body;if(!Array.isArray(a))return e.status(400).json({error:"Некорректный формат данных"});try{const t=await pool.getConnection();try{await t.beginTransaction();for(const e of a){const{playerId:a,stats:n}=e;await t.query("\n                    UPDATE player_statistics_2025 SET\n                        matches = ?,\n                        goals = ?,\n                        assists = ?,\n                        zeromatch = ?,\n                        lostgoals = ?,\n                        zanetti_priz = ?\n                    WHERE player_id = ?\n                ",[n.matches,n.goals,n.assists,n.zeromatch,n.lostgoals,n.zanetti_priz,a])}await t.commit(),t.release(),e.sendStatus(200)}catch(e){throw await t.rollback(),t.release(),e}}catch(t){console.error("Ошибка обновления статистики:",t),e.status(500).json({error:"Ошибка сервера при обновлении статистики"})}})),router.put("/players/:playerId/statistics",(async(t,e)=>{const a=t.params.playerId,n=t.body;try{await pool.query("\n            UPDATE player_statistics_2025 SET\n                matches = ?,\n                goals = ?,\n                assists = ?,\n                zeromatch = ?,\n                lostgoals = ?,\n                zanetti_priz = ?\n            WHERE player_id = ?\n        ",[n.matches,n.goals,n.assists,n.zeromatch,n.lostgoals,n.zanetti_priz,a]),e.sendStatus(200)}catch(t){console.error("Ошибка обновления статистики одного игрока:",t),e.status(500).json({error:"Ошибка сервера"})}router.get("/players/:id",(async(t,e)=>{const a=t.params.id;try{const[t]=await pool.query("SELECT * FROM players WHERE id = ?",[a]);if(0===t.length)return e.status(404).json({error:"Игрок не найден"});e.json(t[0])}catch(t){console.error("Ошибка при получении игрока по ID:",t),e.status(500).json({error:"Ошибка сервера"})}}))}));